////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////																////
////				This ImageJ macro creates a montage of a lineage of cells				////
////					by calling the javascript 'Analyze_Lineages.js'.					////
////																////
////							Florent Pantin, 2013							////
////																////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/// Initial settings

	// Set file separators
	lineseparator = "\n";
	cellseparator = ",";

	// Set the path of R and scripts
	pathOfScripts = getDirectory("imagej") + "macros\\Track 'n' R\\";
	pathOfScripts = replace(pathOfScripts, "PROGRA~1", "Program Files");
	pathOfScripts = replace(pathOfScripts, "PROGRA~2", "Program Files (x86)");
	nameOfScript = "Analyze_Lineages";
	nameOfRScript = nameOfScript + ".r";
	nameOfRoutFile = nameOfRScript + ".Rout";
	nameOfJavaScript = nameOfScript + ".js";
	nameOfCalledMacro = nameOfScript + "_called.txt";
	while (File.exists(pathOfScripts + "Track_n_R.r") != 1 || File.exists(pathOfScripts + nameOfRScript) != 1 || File.exists(pathOfScripts + nameOfJavaScript) != 1 || File.exists(pathOfScripts + nameOfCalledMacro) != 1)
		{
		Dialog.create("Error");
		Dialog.addMessage("The scripts:\n    - Track_n_R.r\n    - " + nameOfRScript + "\n    - " + nameOfJavaScript + "\n    - " + nameOfCalledMacro + "\nare not all present in the expected folder (" + pathOfScripts + ").\nSelect the directory where the four of them are located.");
		Dialog.show();
		pathOfScripts = getDirectory("Select the script directory");
		}
	if (File.exists(pathOfScripts + "Rpath.txt") !=1)
		{
		Rpath = "";
		while (endsWith(Rpath, "\\R.exe") != 1)
			{
			Rpath = File.openDialog("Select the R executable (e.g. 'C:\\Program Files\\R\\R-3.0.1\\bin\\x64\\R.exe')");
			}
		f = File.open(pathOfScripts + "Rpath.txt");
		print(f, Rpath);
		File.close(f);
		}
	else
		{
		Rpath = split(File.openAsString(pathOfScripts + "Rpath.txt"), lineseparator);
		Rpath = split(Rpath[0], cellseparator);
		Rpath = Rpath[0];
		if (File.exists(Rpath) !=1)
			{
			Rpath = "";
			while (endsWith(Rpath, "\\R.exe") != 1)
				{
				Rpath = File.openDialog("Select the R executable (e.g. 'C:\\Program Files\\R\\R-3.0.1\\bin\\x64\\R.exe')");
				}
			f = File.open(pathOfScripts + "Rpath.txt");
			print(f, Rpath);
			File.close(f);
			}
		}
	
	// Set the csv file and the directory containing the project
	csvFile = File.openDialog("Select the csv file containing raw data");
	csvName = File.getName(csvFile);
	csvPath = substring(csvFile, 0, indexOf(csvFile, csvName));
	idx_Data = indexOf(csvPath, "Data\\");
	if (idx_Data != -1) { projDir = substring(csvFile, 0, idx_Data); } else { projDir = "error"; };
	while ((endsWith(csvFile, ".csv") != 1) || (projDir + "Data\\" + csvName != csvFile))
		{
		Dialog.create("Error");
		Dialog.addMessage("The file should be a CSV file located in the 'Data\' folder of the project directory.\nSelect the csv file again.");
		Dialog.show();
		csvFile = File.openDialog("Select the csv file containing raw data");
		csvName = File.getName(csvFile);
		csvPath = substring(csvFile, 0, indexOf(csvFile, csvName));
		idx_Data = indexOf(csvPath, "Data\\");
		if (idx_Data != -1) { projDir = substring(csvFile, 0, idx_Data); }	else { projDir = "error"; };
		}


/// Get images to be plotted

	// Get the image information

	linesInfo = split(File.openAsString(csvFile), lineseparator);
	Names = split(linesInfo[1], cellseparator);
	XYshift = split(linesInfo[2], cellseparator);
	AngleShiftTime = split(linesInfo[3], cellseparator);
	Scales = split(linesInfo[4], cellseparator);

	// edit 2018/08/25 //
	// In some systems, empty cells are not ignored when a line is imported, while in others they are.
	// This is a problem because two consecutive image names are always separated by an empty cell in PointTracker files.
	// This piece of code allows removing the empty names.
	if (Names.length == XYshift.length)
		{
		NamesTemp = Array.trim(Names, 1);
		for (i = 1; i < (Names.length-1)/2+1; i++) 
			{
			NamesTemp = Array.concat(NamesTemp, Array.slice(Names, (i*2)-1, i*2)); 
			}
		Names = NamesTemp;
		}
	// end edit //


	// Build the checkbox list

	nrow = minOf(16, Names.length - 1); // maximum 16 rows
	ncol = -floor(-(Names.length - 1)/nrow);
	n = nrow*ncol;
	labels = newArray(n);
	defaults = newArray(n);
	i = 0;
	for (c = 0; c < ncol; c++)
		{
		for (r = 0; r < nrow; r++)
			{
			j = r*ncol + c;
			defaults[j] = false;
			if (i < (Names.length - 1))
				{
				name = Names[1 + i];
				time = parseFloat(AngleShiftTime[1+ (2*i) +1]);
				labels[j] = name + " (" + round(10*time)/10 + " h)";
				}
			else
				{
				labels[j] = "(empty, do not tick)";
				}
			i = i + 1;
			}
		}	


	// Ask user for the list of images and save

	check_Images = "FALSE";
	while (check_Images == "FALSE")
		{
		// Delete putative old file (just in case it was not deleted properly before)
		File.delete("D:\\ImageList.txt");		
		
		// Open the dialog box for choice of the images
		Dialog.create("Select images for cell lineages");
		Dialog.addMessage("Select at least two images between which cell lineages will be analyzed.");//\nIf only one image is selected, only cell outlines will be plotted.");
		Dialog.addCheckbox("Use all images", false);
		Dialog.addMessage(" \n");
		Dialog.addCheckboxGroup(nrow, ncol, labels, defaults);
		Dialog.show();

		// Get the images back
		allImages = Dialog.getCheckbox();
		if (allImages == 1)
			{
			countImages = Names.length - 1;
			f = File.open("D:\\ImageList.txt");
			for (i = 0; i < (Names.length - 1); i++)
				{
				print(f, Names[1 + i]);
				}
			File.close(f);
			check_Images = "TRUE";
			}
		else
			{
			countImages = 0;
			isIncluded = newArray(Names.length - 1);
			for (j = 0; j < n; j++)
				{
				img = Dialog.getCheckbox();
				i = floor(nrow*j/n) + nrow*(j - ncol * floor(nrow*j/n));
				if (img == 1 && i < (Names.length - 1))
					{
					isIncluded[i] = 1;
					countImages = countImages + 1;
					}
				else if (img == 0 && i < (Names.length - 1))
					{
					isIncluded[i] = 0;
					}
				}
			if (countImages >= 1)
				{
				f = File.open("D:\\ImageList.txt");
				for (i = 0; i < (Names.length -1); i++)
					{
					if (isIncluded[i] == 1)
						{
						print(f, Names[1 + i]);
						}
					}
				File.close(f);
				check_Images = "TRUE";
				}
			else
				{
				Dialog.create("Error");
				Dialog.addMessage("At least one image need to be ticked. Select the images again.");
				Dialog.show();
				}
			}
		}


/// Get parameters

	// Open the dialog box of the parameters

	Dialog.create("Choose parameters");
	Dialog.addRadioButtonGroup("Method", newArray("All lineages", "All cells", "Single cell"), 1, 3, "All lineages");
	Dialog.addNumber("Cell # (ignored if method is not 'Single cell'):", 0);
	Dialog.addRadioButtonGroup("Cell orientation", newArray("As in Track 'n' R", "As in PointTracker"), 1, 2, "As in Track 'n' R");
	Dialog.addRadioButtonGroup("Use leaf outlines to reorient the cells", newArray("Let the software decide", "Yes", "No"), 1, 3, "Let the software decide");
	Dialog.addMessage("Mean angle (°) the leaf should be rotated to be vertical");
	Dialog.addString("(keep BLANK if drawn leaf outlines):",""); 
	Dialog.addRadioButtonGroup("Label within the montage", newArray("Time (h)", "Image name", "Image number", "None"), 1, 4, "Time (h)");
	Dialog.addNumber("Number of columns for the montage:", minOf(countImages, 10));
	Dialog.addCheckbox("Display tracked vertices", true);
	Dialog.addCheckbox("Create a combined PDF with the outlines of all lineages", true);
	Dialog.addCheckbox("Create a CSV file with information on all divisions", false);
	Dialog.addNumber("Optimal interval to compute cell growth (ignored if no csv):", 24);
	Dialog.addCheckbox("Use the first selected image to process divisions (ignored if no csv)", false);
	Dialog.addMessage(" ");
	Dialog.addCheckbox("Make a movie of cell lineages", false);
	Dialog.addRadioButtonGroup("Compression mode for the AVI file", newArray("JPEG", "PNG", "Uncompressed"), 1, 3, "JPEG");
	Dialog.addNumber("Frames per second:", 10);
	Dialog.show();


	// Get the values back and transform them to match R script's requirements

	error_targetCell = "FALSE";
	error_meanAngle = "FALSE";
	error_ncol = "FALSE";
	error_int = "FALSE";
	error_fps = "FALSE";

	method = Dialog.getRadioButton();
	if (method == "All lineages")
		{
		allLineages = "TRUE";
		allCells = "FALSE";
		targetCell = Dialog.getNumber();
		targetCell = "NULL";
		}
	else if (method == "All cells")
		{
		allLineages = "FALSE";
		allCells = "TRUE";
		targetCell = Dialog.getNumber();
		targetCell = "NULL";
		}
	else if (method == "Single cell")
		{ 
		allLineages = "FALSE";
		allCells = "FALSE";
		targetCell = Dialog.getNumber();
		if (targetCell != parseFloat(targetCell)) { error_targetCell = "TRUE"; };
		else if (targetCell < 0 || targetCell != round(targetCell)) { error_targetCell = "TRUE"; };
		}

	reorient = Dialog.getRadioButton();
	leafShape = Dialog.getRadioButton();
	meanAngle = Dialog.getString();
	if (reorient == "As in Track 'n' R")
		{
		reorient = "TRUE";
		if (leafShape == "Let the software decide") { leafShape = "NULL"; } else if (leafShape == "Yes") { leafShape = "TRUE"; } else if (leafShape == "No") { leafShape = "FALSE"; };
		if (replace(meanAngle, " ", "") == "") { meanAngle = "NULL"; }; else { meanAngle = parseFloat(meanAngle); if (isNaN(meanAngle)) { error_meanAngle = "TRUE"; }; };
		}
	else
		{
		reorient = "FALSE";
		leafShape = "NULL";
		meanAngle = "NULL";
		}
	
	label = Dialog.getRadioButton();
	if (label == "Time (h)") { mainPlot = "TIME"; } else if (label == "Image name") { mainPlot = "NAME"; } else if (label == "Image number") { mainPlot = "NUMBER"; } else { mainPlot = "NULL"; };
	ncol = Dialog.getNumber();
	if (ncol != parseFloat(ncol)) { error_ncol = "TRUE"; };
	else if (ncol < 1 || ncol != round(ncol)) { error_ncol = "TRUE"; };
	displayVertices = Dialog.getCheckbox();
	if (displayVertices == 1) { displayVertices = "TRUE"; }; else { displayVertices = "FALSE"; };
	combinedPDF = Dialog.getCheckbox();
	if (combinedPDF == 1) { combinedPDF = "TRUE"; }; else { combinedPDF = "FALSE"; };

	createCSV = Dialog.getCheckbox();
	int = Dialog.getNumber();
	if (createCSV == 1)
		{
		createCSV = "TRUE";
		if (int != parseFloat(int)) { error_int = "TRUE"; };
		else if (int <= 0 ) { error_int = "TRUE"; };
		}
	else
		{
		createCSV = "FALSE";
		int = 24;
		}
	ini = Dialog.getCheckbox();
	if (ini == 1) { ini = "TRUE"; }; else { ini = "FALSE"; };

	makeAVI = Dialog.getCheckbox();
	if (makeAVI == 1) { makeAVI = "TRUE"; }; else { makeAVI = "FALSE"; };
	compr = Dialog.getRadioButton();
	fps = Dialog.getNumber();
	if (makeAVI == "TRUE")
		{
		if (fps != parseFloat(fps)) { error_fps = "TRUE"; };
		else if (fps < 1 || fps != round(fps)) { error_fps = "TRUE"; };
		}
	else
		{
		fps = 10; // Not used
		}


	// Check potential errors

	while (error_targetCell == "TRUE")
		{
		error_targetCell = "FALSE";
		Dialog.create("Error, please correct");
		Dialog.addMessage("The target cell should be given as an integer corresponding to an existing cell.");
		Dialog.addNumber("Cell #:", 0);
		Dialog.show();
		targetCell = Dialog.getNumber();
		if (targetCell != parseFloat(targetCell)) { error_targetCell = "TRUE"; };
		else if (targetCell < 0 || targetCell != round(targetCell)) { error_targetCell = "TRUE"; };
		}	
	
	while (error_meanAngle == "TRUE")
		{
		error_meanAngle = "FALSE";
		Dialog.create("Error, please correct");
		Dialog.addMessage("The angle the leaf will be rotated to be vertical (averaged across all images of the project)\nshould be either missing or given as a numeric values in degrees.");
		Dialog.addString("Mean angle (°) the leaf should be rotated to be vertical (keep BLANK if drawn leaf outlines):",""); 
		Dialog.show();
		meanAngle = Dialog.getString();
		if (replace(meanAngle, " ", "") == "") { meanAngle = "NULL"; }; else { meanAngle = parseFloat(meanAngle); if (isNaN(meanAngle)) { error_meanAngle = "TRUE"; }; };
		}

	while (error_ncol == "TRUE")
		{
		error_ncol = "FALSE";
		Dialog.create("Error, please correct");
		Dialog.addMessage("The number of colums should be a strictly positive integer.");
		Dialog.addNumber("Number of columns for the montage:", minOf(countImages, 10));
		Dialog.show();
		ncol = Dialog.getNumber();
		if (ncol != parseFloat(ncol)) { error_ncol = "TRUE"; };
		else if (ncol < 1 || ncol != round(ncol)) { error_ncol = "TRUE"; };
		}

	while (error_int == "TRUE")
		{
		error_int = "FALSE";
		Dialog.create("Error, please correct");
		Dialog.addMessage("The optimal interval to compute cell growth should be a strictly positive number.");
		Dialog.addNumber("Optimal interval to compute cell growth:", 24);
		Dialog.show();
		int = Dialog.getNumber();
		if (int != parseFloat(int)) { error_int = "TRUE"; };
		else if (int <= 0 ) { error_int = "TRUE"; };
		}

	while (error_fps == "TRUE")
		{
		error_fps = "FALSE";
		Dialog.create("Error, please correct");
		Dialog.addMessage("The number of frames per second should be a strictly positive integer.");
		Dialog.addNumber("Frames per second:", 10);
		Dialog.show();
		fps = Dialog.getNumber();
		if (fps != parseFloat(fps)) { error_fps = "TRUE"; };
		else if (fps < 1 || fps != round(fps)) { error_fps = "TRUE"; };
		}


	// Warning message that the macro will run for a long time

	if (method == "All lineages" || method == "All cells")
		{
		if (method == "All lineages") { entity = "lineage)."; } else { entity = "cell)."; };
		duration = round(countImages/40*30);
		Dialog.create("Warning");
		//Dialog.addMessage("The method '" + method + "' was selected.\nThe macro may take a long time to terminate (about " + duration + " seconds per " + entity);
		Dialog.addMessage("The method '" + method + "' was selected.\nThe macro may take a long time to terminate.\nYou willl be able check the progress in the subfolder 'Lineages' of the project directory.");
		Dialog.show();
		}


	// Save parameters in a txt file

	File.delete("D:\\Parameters.txt")
	f = File.open("D:\\Parameters.txt");
	print(f, projDir);
	print(f, csvFile);
	print(f, meanAngle);
	print(f, leafShape);
	print(f, targetCell);
	print(f, allCells);
	print(f, allLineages);
	print(f, combinedPDF);
	print(f, reorient);
	print(f, ncol);
	print(f, mainPlot);
	print(f, displayVertices);
	print(f, createCSV);
	print(f, int);
	print(f, ini);
	print(f, makeAVI);
	print(f, compr);
	print(f, fps);
	File.close(f);


/// Get the grahical output

	// Delete putative old files (just in case they were not deleted properly before)
	File.delete("D:\\count_img.txt");
	File.delete("D:\\" + nameOfRoutFile);
	File.delete("D:\\" + nameOfRScript);
	File.delete("D:\\" + nameOfCalledMacro);
	File.delete("D:\\Track_n_R.r");
	
	// Copy the R scripts to the 'D:\' drive (required because the javascript cannot read files in directory containing a space character)
	File.copy(pathOfScripts + nameOfRScript, "D:\\" + nameOfRScript);
	File.copy(pathOfScripts + "Track_n_R.r", "D:\\Track_n_R.r");

	// Copy the ImageJ macro which will be called by the R script to the 'D:\' drive (required because the javascript cannot read files in directory containing a space character)
	File.copy(pathOfScripts + nameOfCalledMacro, "D:\\" + nameOfCalledMacro);

	// Run the java script that calls R (do not forget the "[" and "]" to allow space character in the path of the javascript)
	run("Run...", "run=" + "[" + pathOfScripts + nameOfJavaScript + "]");


/// Terminate macro

	// Check if the R script has finished properly
	endOfMacro = 0;
	while (endOfMacro == 0)
		{
		endOfMacro = File.exists("D:\\count_img.txt");
		if (endOfMacro == 0 && File.exists("D:\\" + nameOfRoutFile) == 1) 
			{
			wait(30000);
			linesRout = split(File.openAsString("D:\\" + nameOfRoutFile), lineseparator);
			if (linesRout.length > 0)
				{
				cellsRout = split(linesRout[linesRout.length - 1], cellseparator);
				if (cellsRout.length > 0)
					{
					if (cellsRout[0] == "Execution halted" || cellsRout[0] == "Exécution arrêtée")
						{
						macroAbort = "not aborted yet";
						while (macroAbort == "not aborted yet")
							{
							Dialog.create("Macro error");
							Dialog.addMessage("The macro could not finished properly.\n \nCheck the file 'D:\\" + nameOfRoutFile + "' for more details.\n \n Press 'Cancel' to abort the macro.");
							Dialog.show();
							}
						}
					}
				}
			}
		}

	// Get the count of processed images
	count_img = split(File.openAsString("D:\\count_img.txt"),"\n");
	count_img = count_img[0];
	
	// Delete unwanted files
	File.delete("D:\\count_img.txt");
	File.delete("D:\\Parameters.txt");
	File.delete("D:\\ImageList.txt");
	File.delete("D:\\" + nameOfRoutFile);
	File.delete("D:\\" + nameOfRScript);
	File.delete("D:\\" + nameOfCalledMacro);
	File.delete("D:\\Track_n_R.r");

	// Close Log
	if (isOpen("Log"))
		{
		selectWindow("Log");
     		run('Close');
		} 

	// Confirm to user
	Dialog.create("End of macro");
	if (combinedPDF == "TRUE" || count_img == 1) { display_count_pdf = "1 PDF file has "; } else { display_count_pdf = count_img + " PDF files have "; };
	if (count_img == 1)
		{
		display_count = count_img + " montage has ";
		display_count_avi = count_img + " movie has ";
		}
	else
		{
		display_count = count_img + " montages have ";
		display_count_avi = count_img + " movies have ";
		}
	Dialog.addMessage("*** FINISHED ***\n \n" + display_count + "been generated in\n" + projDir + "\Lineages");
	Dialog.addMessage(display_count_pdf + "also been generated in the same subfolder");	
	if (makeAVI == "TRUE") { Dialog.addMessage(display_count_avi + "also been generated in the same subfolder") };	
	if (createCSV == "TRUE") { Dialog.addMessage("A file 'Divisions__" + csvName + "' has also been generated in the subfolder 'Divisions',\nwhich contains a description of all cell divisions.") };
	Dialog.show();
